# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: spring-boot-oauth2-social-login # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/demo?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: javachinna
      SPRING_DATASOURCE_PASSWORD: javachinna     
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service 
  app-client:
    build:
      context: angular-11-social-login # Use an image built from the specified dockerfile in the `angular-11-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8081:80" # Map the exposed port 80 on the container to port 8081 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend  

  # Database Service (Mysql)
  db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: demo
      MYSQL_USER: javachinna
      MYSQL_PASSWORD: javachinna
      MYSQL_ROOT_PASSWORD: root
    networks:
      - backend  
  
# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:  